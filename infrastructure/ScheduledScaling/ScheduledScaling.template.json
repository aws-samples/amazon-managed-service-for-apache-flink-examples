{
 "Parameters": {
  "msfAppName": {
   "Type": "String",
   "Description": "The name of the Amazon Managed Service for Apache Flink Application that you want to scale based on schedule."
  },
  "scaleUpHour": {
   "Type": "Number",
   "Description": "Hour of the day when you want your Amazon Managed Service for Apache Flink Application to Scale Up"
  },
  "scaleDownHour": {
   "Type": "Number",
   "Description": "Hour of the day when you want your Amazon Managed Service for Apache Flink Application to Scale down"
  },
  "lowKPU": {
   "Type": "Number",
   "Description": "KPU you want for your Amazon Managed Service for Apache Flink application during normal hours"
  },
  "highKPU": {
   "Type": "Number",
   "Description": "KPU you want for your Amazon Managed Service for Apache Flink application during peak hours"
  }
 },
 "Resources": {
  "lambdascalerroleB88E149D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Lambda Scaler role",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "kinesisanalytics:DescribeApplication",
          "kinesisanalytics:UpdateApplication"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Sub": [
           "arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${MsfAppName}",
           {
            "MsfAppName": {
             "Ref": "msfAppName"
            }
           }
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "msfAccessPolicy"
     },
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Effect": "Allow",
         "Action": "logs:CreateLogGroup",
         "Resource": {
          "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
         }
        },
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Sub": [
           "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}*",
           {
            "LogGroupName": {
             "Fn::Join": [":", ["", "/aws/lambda/*"]]
            }
           }
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "cloudwatchPolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/lambda-scaler-role/Resource"
   }
  },
  "msfscheduledscaler6846E5C8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nfrom datetime import datetime\nimport boto3\nimport os\n\n# Replace these values with yours\nmy_region= os.environ['REGION']\nmy_msf_appname = os.environ['MSF_APP_NAME']\n\n# Replace these with values pertinent\n# to your scenario\nhigh_scale_start_hour = int(os.environ['SCALE_UP_HOUR']) \nhigh_scale_end_hour = int(os.environ['SCALE_DOWN_HOUR'])\nlow_scale_kpu_count = int(os.environ['LOW_KPU'])\nhigh_scale_kpu_count = int(os.environ['HIGH_KPU'])\n\n# The main lambda handler\ndef handler(event, context):\n    try:\n        check_and_perform_scaling()\n        return True\n    except Exception as e:\n        print(\"Failed to scale due to an exception!\")\n        print(e)\n        return False\n\ndef check_and_perform_scaling():\n    # IMPORTANT: replace with your region\n    kda = boto3.client('kinesisanalyticsv2', region_name=my_region)\n\n    status = \"\"\n    current_app_version = -1\n    response = kda.describe_application(ApplicationName=my_msf_appname)\n    if response and \"ApplicationDetail\" in response:\n        app_detail = response[\"ApplicationDetail\"]\n        if \"ApplicationStatus\" in app_detail:\n            status = app_detail[\"ApplicationStatus\"]\n            print(\"App status: \" + status)\n        else:\n            print(\"Unable to get application status\")\n            return\n\n        if \"ApplicationVersionId\" in app_detail:\n            current_app_version = app_detail[\"ApplicationVersionId\"]\n            print(\"Current app version: \" + str(current_app_version))\n        else:\n            print(\"Unable to get current app version\")\n            return\n\n    if not status:\n        print(\"Unable to get current app status. Not scaling.\")\n        return\n\n    if current_app_version <= 0:\n        print(\"Unable to get current application version. Not scaling.\")\n        return\n\n    if status == \"RUNNING\":\n        perform_scaling(app_detail, kda, my_msf_appname, current_app_version)\n    else:\n        print(\"Not scaling because app is not running.\")\n        print(\"Current status: \" + status)\n\ndef is_in_high_scale_period():\n    current_time = datetime.utcnow()\n    current_hour = current_time.hour\n    return current_hour >= high_scale_start_hour and current_hour <= high_scale_end_hour\n\ndef perform_scaling(app_detail, kda_client, msf_appname, current_app_version):\n    app_config = app_detail[\"ApplicationConfigurationDescription\"]\n    flink_app_config = app_config[\"FlinkApplicationConfigurationDescription\"]\n    parallelism_config = flink_app_config[\"ParallelismConfigurationDescription\"]\n    parallelism = parallelism_config[\"Parallelism\"]\n    current_parallelism = parallelism_config[\"CurrentParallelism\"]\n    if is_in_high_scale_period():\n        if current_parallelism != high_scale_kpu_count:\n            scale_app(kda_client, msf_appname, current_app_version, high_scale_kpu_count)\n        else:\n            print(\"Not scaling app because already at high scale kpu count: \" + str(high_scale_kpu_count))\n    else:\n        if current_parallelism != low_scale_kpu_count:\n            scale_app(kda_client, msf_appname, current_app_version, low_scale_kpu_count)\n        else:\n            print(\"Not scaling app because already at low scale kpu count: \" + str(low_scale_kpu_count))\n\ndef scale_app(kda_client, msf_appname, current_app_version, kpu_count):\n    print(\"Scaling app to: \" + str(kpu_count))\n    update_config = {\n        'FlinkApplicationConfigurationUpdate': {\n            'ParallelismConfigurationUpdate': {\n                'ConfigurationTypeUpdate': 'CUSTOM',\n                'ParallelismUpdate': kpu_count,\n                'ParallelismPerKPUUpdate': 1, # we assume this is always 1\n                'AutoScalingEnabledUpdate': False,\n            }\n        }\n    }\n\n    response = kda_client.update_application(\n        ApplicationName=msf_appname,\n        CurrentApplicationVersionId=current_app_version,\n        ApplicationConfigurationUpdate=update_config,\n    )\n\n    print(\"Updated application parallelism. See response below.\")\n    print(response)\n\n\nif __name__ == \"__main__\":\n    lambda_handler(None, None)\n    \n    "
    },
    "Role": {
     "Fn::GetAtt": [
      "lambdascalerroleB88E149D",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "REGION": {
       "Ref": "AWS::Region"
      },
      "MSF_APP_NAME": {
       "Ref": "msfAppName"
      },
      "SCALE_UP_HOUR": {
       "Ref": "scaleUpHour"
      },
      "SCALE_DOWN_HOUR": {
       "Ref": "scaleDownHour"
      },
      "LOW_KPU": {
       "Ref": "lowKPU"
      },
      "HIGH_KPU": {
       "Ref": "highKPU"
      }
     }
    },
    "Handler": "index.handler",
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "lambdascalerroleB88E149D"
   ],
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/msf-scheduled-scaler/Resource"
   }
  },
  "ScalingUpRule7DE30A38": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": {
     "Fn::Join": [
      "",
      [
       "cron(0 ",
       {
        "Ref": "scaleUpHour"
       },
       " * * ? *)"
      ]
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "msfscheduledscaler6846E5C8",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"message\":\"Triggering Scheduled Scaling\"}"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/ScalingUpRule/Resource"
   }
  },
  "ScalingUpRuleAllowEventRuleScheduledScalingCdkStackmsfscheduledscaler2928F8C82CBEBA57": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "msfscheduledscaler6846E5C8",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ScalingUpRule7DE30A38",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/ScalingUpRule/AllowEventRuleScheduledScalingCdkStackmsfscheduledscaler2928F8C8"
   }
  },
  "ScalingDownRule0C9C2911": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": {
     "Fn::Join": [
      "",
      [
       "cron(0 ",
       {
        "Ref": "scaleDownHour"
       },
       " * * ? *)"
      ]
     ]
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "msfscheduledscaler6846E5C8",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"message\":\"Triggering Scheduled Scaling\"}"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/ScalingDownRule/Resource"
   }
  },
  "ScalingDownRuleAllowEventRuleScheduledScalingCdkStackmsfscheduledscaler2928F8C88F3305E0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "msfscheduledscaler6846E5C8",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ScalingDownRule0C9C2911",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/ScalingDownRule/AllowEventRuleScheduledScalingCdkStackmsfscheduledscaler2928F8C8"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02OuwrDMAxFv6W7oz4ogc6BziX9gKLYKiiJbbDsdDD+9zpNh0znSgdddIH2CqcDfqTRZmpmHiA/I+pJdW/3wICWIgVV/SszWsi9n2l1K4ua0Q4GId+T05G9W80+PyhYFqlTUbSQi1Ib0r+hshTVk/gU9Lba5c47w/F36bwhGOW4nG/Q1m9HYW5CcpEtQb/xC0T+7FzJAAAA"
   },
   "Metadata": {
    "aws:cdk:path": "ScheduledScalingCdkStack/CDKMetadata/Default"
   }
  }
 }
 }
