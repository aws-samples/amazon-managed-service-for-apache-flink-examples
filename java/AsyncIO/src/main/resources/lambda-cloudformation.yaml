AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  RandomResponseLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RandomResponseFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Code:
        ZipFile: |
            import json
            import random
          
            def handler(event, context):
              num = random.randint(1, 100)
              
              if 1 <= num <= 10:  # 10% likelihood of fail
                return {
                'statusCode': 500,
                'body': json.dumps('FAIL')
              }
              elif num == 100:  # 1% likelihood of timeout
                time.sleep(3)
              
              return {
              'statusCode': 200,
              'body': json.dumps('SUCC')
            }
              

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RandomResponseApi

  LambdaIntegration:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: lambda
      RestApiId: !Ref ApiGateway

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LambdaIntegration
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt RandomResponseLambda.Arn

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn: ApiMethod

  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RandomResponseLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*
        - ApiGateway: !Ref ApiGateway

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: RandomResponseApiKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: prod
    DependsOn: ApiDeployment

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: RandomResponseUsagePlan
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: prod
      Throttle:
        BurstLimit: 5
        RateLimit: 10
    DependsOn: ApiKey

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan
    DependsOn: ApiDeployment

Outputs:
  ApiUrl:
    Description: "Invoke URL for the API Gateway"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/lambda"

  ApiKeyValue:
    Description: "API Key to use with the API Gateway"
    Value: !Ref ApiKey
