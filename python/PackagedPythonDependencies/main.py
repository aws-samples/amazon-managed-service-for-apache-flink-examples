"""
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

"""
main.py
~~~~~~~~~~~~~~~~~~~
This module:
    1. Creates the execution environment and specify 3rd-party Python dependencies
    2. Sets any special configuration for local mode (e.g. when running in the IDE)
    3. (Optional) Register the Python dependencies
    4. Retrieves the runtime configuration
    5. Defines and register a UDF that use the python library
    6. Creates a source table to generate data using DataGen connector
    7. Creates a view from a query that uses the UDF
    8. Creates a sink table to Kinesis Data Streams and inserts into the sink table from the view
"""

from pyflink.table import EnvironmentSettings, TableEnvironment, DataTypes
from pyflink.table.udf import udf
import os
import json
import logging
import pyflink
import pathlib

#################################################################################
# 1. Creates the execution environment and specify 3rd-party Python dependencies
#################################################################################

env_settings = EnvironmentSettings.in_streaming_mode()
table_env = TableEnvironment.create(env_settings)

##############################################
# 2. Set special configuration for local mode
##############################################

# Location of the configuration file when running on Managed Flink.
# NOTE: this is not the file included in the project, but a file generated by Managed Flink, based on the
# application configuration.
APPLICATION_PROPERTIES_FILE_PATH = "/etc/flink/application_properties.json"

# Set the environment variable IS_LOCAL=true in your local development environment,
# or in the run profile of your IDE: the application relies on this variable to run in local mode (as a standalone
# Python application, as opposed to running in a Flink cluster).
# Differently from Java Flink, PyFlink cannot automatically detect when running in local mode
is_local = (
    True if os.environ.get("IS_LOCAL") else False
)

if is_local:
    # Load the configuration from the json file included in the project
    APPLICATION_PROPERTIES_FILE_PATH = "application_properties.json"

    # Point to the fat-jar generated by Maven, containing all jar dependencies (e.g. connectors)
    CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
    table_env.get_config().get_configuration().set_string(
        "pipeline.jars",
        # For local development (only): use the fat-jar containing all dependencies, generated by `mvn package`
        "file:///" + CURRENT_DIR + "/target/pyflink-dependencies.jar",
    )

    # Show the PyFlink home directory and the directory where logs will be written, when running locally
    print("PyFlink home: " + os.path.dirname(os.path.abspath(pyflink.__file__)))
    print("Logging directory: " + os.path.dirname(os.path.abspath(pyflink.__file__)) + '/log')


##########################################################################################
# 3.  (Optional) Register the additional Python dependencies - alt. to specifying pyFiles
##########################################################################################

# Alternatively to specifying the runtime property kinesis.analytics.flink.run.options : pyFiles, you can
# programmatically register the sub-folder containing the Python dependencies.
# IMPORTANT: you must either specify pyFiles OR registering the dependencies programmatically. NOT both.
# Also, important: when running locally for development you should install the Python dependencies in a venv and not
# register them programmatically. The reason is that the dependencies downloaded in the dep/ subdirectory must match
# the target architecture used by Managed Flink (linux x86_64), which can differ from the architecture of the machine
# you are using for development.

# Uncomment the following code as alternative to specifying
# the runtime property kinesis.analytics.flink.run.options : pyFiles = dep/
# DO NOT use both runtime property and programmatic registration.
# if not is_local:
#     # Only register the Python dependencies when running locally
#     python_source_dir = str(pathlib.Path(__file__).parent)
#     table_env.add_python_file(file_path="file:///" + python_source_dir + "/dep")


# Utility method, extracting properties from the runtime configuration file
def get_application_properties():
    if os.path.isfile(APPLICATION_PROPERTIES_FILE_PATH):
        with open(APPLICATION_PROPERTIES_FILE_PATH, "r") as file:
            contents = file.read()
            properties = json.loads(contents)
            return properties
    else:
        print('A file at "{}" was not found'.format(APPLICATION_PROPERTIES_FILE_PATH))


# Utility method, extracting a property from a property group
def property_map(props, property_group_id):
    for prop in props:
        if prop["PropertyGroupId"] == property_group_id:
            return prop["PropertyMap"]


#####################################
# 4. Retrieve runtime configuration
#####################################

props = get_application_properties()

# Get name and region of the Kinesis stream from application configuration
output_stream_name = property_map(props, "OutputStream0")["stream.name"]
output_stream_region = property_map(props, "OutputStream0")["aws.region"]
logging.info(f"Output stream: {output_stream_name}, region: {output_stream_region}")


#############################################################
# 5.  Defines and register a UDF that uses the Python library
#############################################################


@udf(input_types=[DataTypes.FLOAT(), DataTypes.FLOAT(), DataTypes.FLOAT(), DataTypes.FLOAT()],
     result_type=DataTypes.FLOAT())
def determinant(element1, element2, element3, element4):
    import numpy as np
    from scipy import linalg
    a = np.array([[element1, element2], [element3, element4]])
    det = linalg.det(a)
    return det


# Register the UDF
table_env.create_temporary_system_function("determinant", determinant)


def main():
    # Demonstrate the Python dependency is also available in the main() method
    # This piece of code is not doing anything useful. The goal is just to shows that the registered dependencies
    # are also available job initialization, in the main() method.
    # A more realistic case would be, for example, using boto3 to fetch some resources you need to initialize the job.
    import numpy as np
    from scipy import linalg
    matrix = np.array([[42, 43], [44, 43]])
    det = linalg.det(matrix)
    print(f"Check dependency in main(): determinant({matrix}) = {det}")


    #################################################
    # 6. Define input table using datagen connector
    #################################################

    # In a real application, this table will probably be connected to a source stream, using for example the 'kinesis'
    # connector.

    table_env.execute_sql("""
                CREATE TABLE random_numbers (
                    seed_time TIMESTAMP(3),
                    element1 FLOAT,
                    element2 FLOAT,
                    element3 FLOAT,
                    element4 FLOAT
                )
                PARTITIONED BY (seed_time)
                WITH (
                    'connector' = 'datagen',
                    'rows-per-second' = '1',
                    'fields.element1.min' = '0',
                    'fields.element1.max' = '100',
                    'fields.element2.min' = '0',
                    'fields.element2.max' = '100',
                    'fields.element3.min' = '0',
                    'fields.element3.max' = '100',
                    'fields.element4.min' = '0',
                    'fields.element4.max' = '100'
                )
        """)

    ###################################################
    # 7. Creates a view from a query that uses the UDF
    ###################################################

    table_env.execute_sql("""
            CREATE TEMPORARY VIEW determinants
            AS
            SELECT seed_time, 
                   element1, element2, element3, element4, 
                   determinant(element1, element2, element3, element4) AS determinant
            FROM random_numbers
    """)

    #################################################
    # 8. Define sink table using kinesis connector
    #################################################

    table_env.execute_sql(f"""
            CREATE TABLE output (
                seed_time TIMESTAMP(3),
                element1 FLOAT,
                element2 FLOAT,
                element3 FLOAT,
                element4 FLOAT,
                determinant FLOAT
              )
              WITH (
                'connector' = 'kinesis',
                'stream' = '{output_stream_name}',
                'aws.region' = '{output_stream_region}',
                'sink.partitioner-field-delimiter' = ';',
                'sink.batch.max-size' = '5',
                'format' = 'json',
                'json.timestamp-format.standard' = 'ISO-8601'
              )
        """)

    # For local development purposes, you might want to print the output to the console, instead of sending it to a
    # Kinesis Stream. To do that, you can replace the sink table using the 'kinesis' connector, above, with a sink table
    # using the 'print' connector. Comment the statement immediately above and uncomment the one immediately below.
    # table_env.execute_sql("""
    #     CREATE TABLE output (
    #             seed_time TIMESTAMP(3),
    #             element1 FLOAT,
    #             element2 FLOAT,
    #             element3 FLOAT,
    #             element4 FLOAT,
    #             determinant FLOAT
    #           )
    #           WITH (
    #             'connector' = 'print'
    #           )
    # """)

    # Executing an INSERT INTO statement will trigger the job
    table_result = table_env.execute_sql("""
            INSERT INTO output
            SELECT seed_time, element1, element2, element3, element4, determinant
                FROM determinants
    """)

    # When running locally, as a standalone Python application, you must instruct Python not to exit at the end of the
    # main() method, otherwise the job will stop immediately.
    # When running the job deployed in a Flink cluster or in Amazon Managed Service for Apache Flink, the main() method
    # must end once the flow has been defined and handed over to the Flink framework to run.
    if is_local:
        table_result.wait()


if __name__ == "__main__":
    main()
