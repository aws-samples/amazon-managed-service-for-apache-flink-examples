"""
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
# -*- coding: utf-8 -*-
"""
main.py
~~~~~~~~~~~~~~~~~~~
This module:
FIXME
    1. Creates a execution environment
    2. Set any special configuration for local mode (e.g. when running in the IDE)
    3. Retrieve the runtime configuration
    4. Creates a source table to generate data using DataGen connector
    5. Create a catalog in AWS Glue data catalog
    6. Create a sink table writing to an Apache Iceberg table on Amazon S3
    7. Insert into the sink table (Iceberg S3)
"""

import os
import json
import pyflink
from pyflink.table import EnvironmentSettings, TableEnvironment

#######################################
# 1. Creates the execution environment
#######################################

env_settings = EnvironmentSettings.in_streaming_mode()
table_env = TableEnvironment.create(env_settings)

table_env.get_config().get_configuration().set_string(
    "execution.checkpointing.mode", "EXACTLY_ONCE"
)

table_env.get_config().get_configuration().set_string(
    "execution.checkpointing.interval", "1 min"
)

# Location of the configuration file when running on Managed Flink.
# NOTE: this is not the file included in the project, but a file generated by Managed Flink, based on the
# application configuration.
APPLICATION_PROPERTIES_FILE_PATH = "/etc/flink/application_properties.json"

# Set the environment variable IS_LOCAL=true in your local development environment,
# or in the run profile of your IDE: the application relies on this variable to run in local mode (as a standalone
# Python application, as opposed to running in a Flink cluster).
# Differently from Java Flink, PyFlink cannot automatically detect when running in local mode
is_local = (
    True if os.environ.get("IS_LOCAL") else False
)

##############################################
# 2. Set special configuration for local mode
##############################################

if is_local:
    # Load the configuration from the json file included in the project
    APPLICATION_PROPERTIES_FILE_PATH = "application_properties.json"

    # Point to the fat-jar generated by Maven, containing all jar dependencies (e.g. connectors)
    CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))
    table_env.get_config().get_configuration().set_string(
        "pipeline.jars",
        # For local development (only): use the fat-jar containing all dependencies, generated by `mvn package`
        # located in the target/ subdirectory
        "file:///" + CURRENT_DIR + "/target/pyflink-dependencies.jar",
    )

    # Show the PyFlink home directory and the directory where logs will be written, when running locally
    print("PyFlink home: " + os.path.dirname(os.path.abspath(pyflink.__file__)))
    print("Logging directory: " + os.path.dirname(os.path.abspath(pyflink.__file__)) + '/log')

# Utility method, extracting properties from the runtime configuration file
def get_application_properties():
    if os.path.isfile(APPLICATION_PROPERTIES_FILE_PATH):
        with open(APPLICATION_PROPERTIES_FILE_PATH, "r") as file:
            contents = file.read()
            properties = json.loads(contents)
            return properties
    else:
        print('A file at "{}" was not found'.format(APPLICATION_PROPERTIES_FILE_PATH))

# Utility method, extracting a property from a property group
def property_map(props, property_group_id):
    for prop in props:
        if prop["PropertyGroupId"] == property_group_id:
            return prop["PropertyMap"]

def main():

    #####################################
    # Default configs
    #####################################

    # Default catalog, database, and input/output tables
    catalog = "default_catalog"
    database = "default_database"
    input_table = f"{catalog}.{database}.sensor_readings"
    print_output_table = f"{catalog}.{database}.sensor_output"


    #####################################
    # 3. Retrieve runtime configuration
    #####################################

    props = get_application_properties()

    # Iceberg table configuration
    iceberg_table_properties = property_map(props, "IcebergTable0")
    iceberg_catalog_name = iceberg_table_properties["catalog.name"]
    iceberg_warehouse_path = iceberg_table_properties["warehouse.path"]
    iceberg_database_name = iceberg_table_properties["database.name"]
    iceberg_table_name = iceberg_table_properties["table.name"]
    iceberg_table_region = iceberg_table_properties["aws.region"]

    #################################################
    # 4. Define input table using datagen connector
    #################################################

    # In a real application, this table will probably be connected to a source stream, using for example the 'kinesis'
    # connector.
    table_env.execute_sql(f"""
            CREATE TABLE {input_table} (
                sensor_id INT,
                temperature NUMERIC(6,2),
                measurement_time TIMESTAMP(3)
            )
            PARTITIONED BY (sensor_id)
            WITH (
                'connector' = 'datagen',
                'fields.sensor_id.min' = '10',
                'fields.sensor_id.max' = '20',
                'fields.temperature.min' = '0',
                'fields.temperature.max' = '100'
            )
    """)

    #################################################
    # 5. Define catalog for iceberg table
    #################################################

    table_env.execute_sql(f"""
            CREATE CATALOG {iceberg_catalog_name} WITH (
                'type' = 'iceberg',
                'property-version' = '1',
                'catalog-impl' = 'org.apache.iceberg.aws.glue.GlueCatalog',
                'io-impl' = 'org.apache.iceberg.aws.s3.S3FileIO',
                'warehouse' = '{iceberg_warehouse_path}',
                'aws.region' = '{iceberg_table_region}'
            )
    """)
    
    #################################################
    # 6. Use the catalog and create database
    #################################################

    # Start by using the catalog
    table_env.execute_sql(f"USE CATALOG `{iceberg_catalog_name}`;")

    # Create database if not exists
    table_env.execute_sql(f"CREATE DATABASE IF NOT EXISTS `{iceberg_database_name}`;")

    # Use database
    table_env.execute_sql(f"USE `{iceberg_database_name}`;")

    #################################################
    # 7. Define sink table for Iceberg table
    #################################################

    table_env.execute_sql(f"""
            CREATE TABLE IF NOT EXISTS `{iceberg_catalog_name}`.`{iceberg_database_name}`.`{iceberg_table_name}` (
                sensor_id INT NOT NULL,
                temperature NUMERIC(6,2) NOT NULL,
                `time` TIMESTAMP_LTZ(3) NOT NULL
            ) 
            PARTITIONED BY (sensor_id)
            WITH (
                'type' = 'iceberg',
                'write.format.default' = 'parquet',
                'write.parquet.compression-codec' = 'snappy',
                'format-version' = '2'
            )
    """)

    # table_env.execute_sql(f"""
    #         CREATE TABLE {print_output_table}(
    #             sensor_id INT NOT NULL,
    #             temperature NUMERIC(6,2) NOT NULL,
    #             `time` TIMESTAMP_LTZ(3) NOT NULL
    #         )
    #         PARTITIONED BY (sensor_id)
    #         WITH (
    #             'connector' = 'print'
    #         )
    # """)

    # In a real application we would probably have some transformations between the input and the output.
    # For simplicity, we will send the source table directly to the sink table.

    ##########################################################################################
    # 8. Insert into the sink table
    ##########################################################################################

    table_result = table_env.execute_sql(f"""
        INSERT INTO `{iceberg_catalog_name}`.`{iceberg_database_name}`.`{iceberg_table_name}`   
        SELECT sensor_id, temperature, measurement_time as `time` 
        FROM {input_table}""")

    ## Uncomment below when using "print"
    # table_result = table_env.execute_sql(f"""
    #     INSERT INTO sensors_output   
    #     SELECT sensor_id, temperature, measurement_time as `time` 
    #     FROM {input_table}""")


    # When running locally, as a standalone Python application, you must instruct Python not to exit at the end of the
    # main() method, otherwise the job will stop immediately.
    # When running the job deployed in a Flink cluster or in Amazon Managed Service for Apache Flink, the main() method
    # must end once the flow has been defined and handed over to the Flink framework to run.
    if is_local:
        table_result.wait()

if __name__ == "__main__":
    main()